/*
 * generated by Xtext 2.20.0
 */
package de.sebinside.dcp.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.sebinside.dcp.dsl.ide.contentassist.antlr.internal.InternalDSLParser;
import de.sebinside.dcp.dsl.services.DSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
			builder.put(grammarAccess.getCharacteristicsTypeAccess().getAlternatives(), "rule__CharacteristicsType__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
			builder.put(grammarAccess.getValueSetAccess().getGroup(), "rule__ValueSet__Group__0");
			builder.put(grammarAccess.getValueSetAccess().getGroup_5(), "rule__ValueSet__Group_5__0");
			builder.put(grammarAccess.getAttributeTypeAccess().getGroup(), "rule__AttributeType__Group__0");
			builder.put(grammarAccess.getPropertyTypeAccess().getGroup(), "rule__PropertyType__Group__0");
			builder.put(grammarAccess.getCharacteristicClassAccess().getGroup(), "rule__CharacteristicClass__Group__0");
			builder.put(grammarAccess.getCharacteristicClassAccess().getGroup_4(), "rule__CharacteristicClass__Group_4__0");
			builder.put(grammarAccess.getCharacteristicSelectorAccess().getGroup(), "rule__CharacteristicSelector__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
			builder.put(grammarAccess.getValueSetAccess().getNameAssignment_1(), "rule__ValueSet__NameAssignment_1");
			builder.put(grammarAccess.getValueSetAccess().getMembersAssignment_4(), "rule__ValueSet__MembersAssignment_4");
			builder.put(grammarAccess.getValueSetAccess().getMembersAssignment_5_1(), "rule__ValueSet__MembersAssignment_5_1");
			builder.put(grammarAccess.getAttributeTypeAccess().getNameAssignment_1(), "rule__AttributeType__NameAssignment_1");
			builder.put(grammarAccess.getAttributeTypeAccess().getValuesetAssignment_3(), "rule__AttributeType__ValuesetAssignment_3");
			builder.put(grammarAccess.getPropertyTypeAccess().getNameAssignment_1(), "rule__PropertyType__NameAssignment_1");
			builder.put(grammarAccess.getPropertyTypeAccess().getValuesetAssignment_3(), "rule__PropertyType__ValuesetAssignment_3");
			builder.put(grammarAccess.getCharacteristicClassAccess().getNameAssignment_1(), "rule__CharacteristicClass__NameAssignment_1");
			builder.put(grammarAccess.getCharacteristicClassAccess().getMembersAssignment_3(), "rule__CharacteristicClass__MembersAssignment_3");
			builder.put(grammarAccess.getCharacteristicClassAccess().getMembersAssignment_4_1(), "rule__CharacteristicClass__MembersAssignment_4_1");
			builder.put(grammarAccess.getCharacteristicSelectorAccess().getNameAssignment_0(), "rule__CharacteristicSelector__NameAssignment_0");
			builder.put(grammarAccess.getCharacteristicSelectorAccess().getLiteralAssignment_2(), "rule__CharacteristicSelector__LiteralAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DSLGrammarAccess grammarAccess;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
