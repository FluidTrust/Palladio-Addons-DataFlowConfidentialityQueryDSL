/**
 * generated by Xtext 2.20.0
 */
package de.sebinside.dcp.dsl.dSL.provider;

import de.sebinside.dcp.dsl.dSL.util.DSLAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DSLItemProviderAdapterFactory extends DSLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DSLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.AbstractElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractElementItemProvider abstractElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.AbstractElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractElementAdapter() {
		if (abstractElementItemProvider == null) {
			abstractElementItemProvider = new AbstractElementItemProvider(this);
		}

		return abstractElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.DataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeItemProvider dataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.DataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeAdapter() {
		if (dataTypeItemProvider == null) {
			dataTypeItemProvider = new DataTypeItemProvider(this);
		}

		return dataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.ValueSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueSetItemProvider valueSetItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.ValueSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueSetAdapter() {
		if (valueSetItemProvider == null) {
			valueSetItemProvider = new ValueSetItemProvider(this);
		}

		return valueSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.CharacteristicsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharacteristicsTypeItemProvider characteristicsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.CharacteristicsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharacteristicsTypeAdapter() {
		if (characteristicsTypeItemProvider == null) {
			characteristicsTypeItemProvider = new CharacteristicsTypeItemProvider(this);
		}

		return characteristicsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.AttributeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeItemProvider attributeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.AttributeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeAdapter() {
		if (attributeTypeItemProvider == null) {
			attributeTypeItemProvider = new AttributeTypeItemProvider(this);
		}

		return attributeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.PropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyTypeItemProvider propertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.PropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyTypeAdapter() {
		if (propertyTypeItemProvider == null) {
			propertyTypeItemProvider = new PropertyTypeItemProvider(this);
		}

		return propertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.CharacteristicClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharacteristicClassItemProvider characteristicClassItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.CharacteristicClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharacteristicClassAdapter() {
		if (characteristicClassItemProvider == null) {
			characteristicClassItemProvider = new CharacteristicClassItemProvider(this);
		}

		return characteristicClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.CharacteristicSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharacteristicSelectorItemProvider characteristicSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.CharacteristicSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharacteristicSelectorAdapter() {
		if (characteristicSelectorItemProvider == null) {
			characteristicSelectorItemProvider = new CharacteristicSelectorItemProvider(this);
		}

		return characteristicSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.DataSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSelectorItemProvider dataSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.DataSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSelectorAdapter() {
		if (dataSelectorItemProvider == null) {
			dataSelectorItemProvider = new DataSelectorItemProvider(this);
		}

		return dataSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.AttributeSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeSelectorItemProvider attributeSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.AttributeSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeSelectorAdapter() {
		if (attributeSelectorItemProvider == null) {
			attributeSelectorItemProvider = new AttributeSelectorItemProvider(this);
		}

		return attributeSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.AttributeClassSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeClassSelectorItemProvider attributeClassSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.AttributeClassSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeClassSelectorAdapter() {
		if (attributeClassSelectorItemProvider == null) {
			attributeClassSelectorItemProvider = new AttributeClassSelectorItemProvider(this);
		}

		return attributeClassSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.DestinationSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DestinationSelectorItemProvider destinationSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.DestinationSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDestinationSelectorAdapter() {
		if (destinationSelectorItemProvider == null) {
			destinationSelectorItemProvider = new DestinationSelectorItemProvider(this);
		}

		return destinationSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.PropertySelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertySelectorItemProvider propertySelectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.PropertySelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertySelectorAdapter() {
		if (propertySelectorItemProvider == null) {
			propertySelectorItemProvider = new PropertySelectorItemProvider(this);
		}

		return propertySelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.PropertyClassSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyClassSelectorItemProvider propertyClassSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.PropertyClassSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyClassSelectorAdapter() {
		if (propertyClassSelectorItemProvider == null) {
			propertyClassSelectorItemProvider = new PropertyClassSelectorItemProvider(this);
		}

		return propertyClassSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.Statement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementItemProvider statementItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.Statement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementAdapter() {
		if (statementItemProvider == null) {
			statementItemProvider = new StatementItemProvider(this);
		}

		return statementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.StatementType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementTypeItemProvider statementTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.StatementType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementTypeAdapter() {
		if (statementTypeItemProvider == null) {
			statementTypeItemProvider = new StatementTypeItemProvider(this);
		}

		return statementTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.sebinside.dcp.dsl.dSL.StatementModality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementModalityItemProvider statementModalityItemProvider;

	/**
	 * This creates an adapter for a {@link de.sebinside.dcp.dsl.dSL.StatementModality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementModalityAdapter() {
		if (statementModalityItemProvider == null) {
			statementModalityItemProvider = new StatementModalityItemProvider(this);
		}

		return statementModalityItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (abstractElementItemProvider != null) abstractElementItemProvider.dispose();
		if (dataTypeItemProvider != null) dataTypeItemProvider.dispose();
		if (valueSetItemProvider != null) valueSetItemProvider.dispose();
		if (characteristicsTypeItemProvider != null) characteristicsTypeItemProvider.dispose();
		if (attributeTypeItemProvider != null) attributeTypeItemProvider.dispose();
		if (propertyTypeItemProvider != null) propertyTypeItemProvider.dispose();
		if (characteristicClassItemProvider != null) characteristicClassItemProvider.dispose();
		if (characteristicSelectorItemProvider != null) characteristicSelectorItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (dataSelectorItemProvider != null) dataSelectorItemProvider.dispose();
		if (attributeSelectorItemProvider != null) attributeSelectorItemProvider.dispose();
		if (attributeClassSelectorItemProvider != null) attributeClassSelectorItemProvider.dispose();
		if (destinationSelectorItemProvider != null) destinationSelectorItemProvider.dispose();
		if (propertySelectorItemProvider != null) propertySelectorItemProvider.dispose();
		if (propertyClassSelectorItemProvider != null) propertyClassSelectorItemProvider.dispose();
		if (statementItemProvider != null) statementItemProvider.dispose();
		if (statementTypeItemProvider != null) statementTypeItemProvider.dispose();
		if (statementModalityItemProvider != null) statementModalityItemProvider.dispose();
	}

}
