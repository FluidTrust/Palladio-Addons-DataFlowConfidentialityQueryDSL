/**
 * generated by Xtext 2.20.0
 */
package de.sebinside.dcp.dsl.dSL.impl;

import de.sebinside.dcp.dsl.dSL.CharacteristicSelector;
import de.sebinside.dcp.dsl.dSL.CharacteristicsType;
import de.sebinside.dcp.dsl.dSL.DSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Characteristic Selector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.sebinside.dcp.dsl.dSL.impl.CharacteristicSelectorImpl#getRef <em>Ref</em>}</li>
 *   <li>{@link de.sebinside.dcp.dsl.dSL.impl.CharacteristicSelectorImpl#isNegated <em>Negated</em>}</li>
 *   <li>{@link de.sebinside.dcp.dsl.dSL.impl.CharacteristicSelectorImpl#getLiterals <em>Literals</em>}</li>
 *   <li>{@link de.sebinside.dcp.dsl.dSL.impl.CharacteristicSelectorImpl#isConjuncted <em>Conjuncted</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CharacteristicSelectorImpl extends MinimalEObjectImpl.Container implements CharacteristicSelector
{
  /**
	 * The cached value of the '{@link #getRef() <em>Ref</em>}' reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getRef()
	 * @generated
	 * @ordered
	 */
  protected CharacteristicsType ref;

  /**
	 * The default value of the '{@link #isNegated() <em>Negated</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #isNegated()
	 * @generated
	 * @ordered
	 */
  protected static final boolean NEGATED_EDEFAULT = false;

  /**
	 * The cached value of the '{@link #isNegated() <em>Negated</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #isNegated()
	 * @generated
	 * @ordered
	 */
  protected boolean negated = NEGATED_EDEFAULT;

  /**
	 * The cached value of the '{@link #getLiterals() <em>Literals</em>}' attribute list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLiterals()
	 * @generated
	 * @ordered
	 */
  protected EList<String> literals;

  /**
	 * The default value of the '{@link #isConjuncted() <em>Conjuncted</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #isConjuncted()
	 * @generated
	 * @ordered
	 */
  protected static final boolean CONJUNCTED_EDEFAULT = false;

  /**
	 * The cached value of the '{@link #isConjuncted() <em>Conjuncted</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #isConjuncted()
	 * @generated
	 * @ordered
	 */
  protected boolean conjuncted = CONJUNCTED_EDEFAULT;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected CharacteristicSelectorImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return DSLPackage.Literals.CHARACTERISTIC_SELECTOR;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public CharacteristicsType getRef()
  {
		if (ref != null && ref.eIsProxy()) {
			InternalEObject oldRef = (InternalEObject)ref;
			ref = (CharacteristicsType)eResolveProxy(oldRef);
			if (ref != oldRef) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, DSLPackage.CHARACTERISTIC_SELECTOR__REF, oldRef, ref));
			}
		}
		return ref;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public CharacteristicsType basicGetRef()
  {
		return ref;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setRef(CharacteristicsType newRef)
  {
		CharacteristicsType oldRef = ref;
		ref = newRef;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.CHARACTERISTIC_SELECTOR__REF, oldRef, ref));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean isNegated()
  {
		return negated;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setNegated(boolean newNegated)
  {
		boolean oldNegated = negated;
		negated = newNegated;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.CHARACTERISTIC_SELECTOR__NEGATED, oldNegated, negated));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<String> getLiterals()
  {
		if (literals == null) {
			literals = new EDataTypeEList<String>(String.class, this, DSLPackage.CHARACTERISTIC_SELECTOR__LITERALS);
		}
		return literals;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean isConjuncted()
  {
		return conjuncted;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setConjuncted(boolean newConjuncted)
  {
		boolean oldConjuncted = conjuncted;
		conjuncted = newConjuncted;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.CHARACTERISTIC_SELECTOR__CONJUNCTED, oldConjuncted, conjuncted));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case DSLPackage.CHARACTERISTIC_SELECTOR__REF:
				if (resolve) return getRef();
				return basicGetRef();
			case DSLPackage.CHARACTERISTIC_SELECTOR__NEGATED:
				return isNegated();
			case DSLPackage.CHARACTERISTIC_SELECTOR__LITERALS:
				return getLiterals();
			case DSLPackage.CHARACTERISTIC_SELECTOR__CONJUNCTED:
				return isConjuncted();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case DSLPackage.CHARACTERISTIC_SELECTOR__REF:
				setRef((CharacteristicsType)newValue);
				return;
			case DSLPackage.CHARACTERISTIC_SELECTOR__NEGATED:
				setNegated((Boolean)newValue);
				return;
			case DSLPackage.CHARACTERISTIC_SELECTOR__LITERALS:
				getLiterals().clear();
				getLiterals().addAll((Collection<? extends String>)newValue);
				return;
			case DSLPackage.CHARACTERISTIC_SELECTOR__CONJUNCTED:
				setConjuncted((Boolean)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case DSLPackage.CHARACTERISTIC_SELECTOR__REF:
				setRef((CharacteristicsType)null);
				return;
			case DSLPackage.CHARACTERISTIC_SELECTOR__NEGATED:
				setNegated(NEGATED_EDEFAULT);
				return;
			case DSLPackage.CHARACTERISTIC_SELECTOR__LITERALS:
				getLiterals().clear();
				return;
			case DSLPackage.CHARACTERISTIC_SELECTOR__CONJUNCTED:
				setConjuncted(CONJUNCTED_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case DSLPackage.CHARACTERISTIC_SELECTOR__REF:
				return ref != null;
			case DSLPackage.CHARACTERISTIC_SELECTOR__NEGATED:
				return negated != NEGATED_EDEFAULT;
			case DSLPackage.CHARACTERISTIC_SELECTOR__LITERALS:
				return literals != null && !literals.isEmpty();
			case DSLPackage.CHARACTERISTIC_SELECTOR__CONJUNCTED:
				return conjuncted != CONJUNCTED_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (negated: ");
		result.append(negated);
		result.append(", literals: ");
		result.append(literals);
		result.append(", conjuncted: ");
		result.append(conjuncted);
		result.append(')');
		return result.toString();
	}

} //CharacteristicSelectorImpl
