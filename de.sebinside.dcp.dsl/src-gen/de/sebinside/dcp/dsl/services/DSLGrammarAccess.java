/*
 * generated by Xtext 2.20.0
 */
package de.sebinside.dcp.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetModelTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetModelTypeTargetModelTypeDefParserRuleCall_0_0 = (RuleCall)cTargetModelTypeAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Model:
		//	targetModelType=TargetModelTypeDef?
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//targetModelType=TargetModelTypeDef? elements+=AbstractElement*
		public Group getGroup() { return cGroup; }
		
		//targetModelType=TargetModelTypeDef?
		public Assignment getTargetModelTypeAssignment_0() { return cTargetModelTypeAssignment_0; }
		
		//TargetModelTypeDef
		public RuleCall getTargetModelTypeTargetModelTypeDefParserRuleCall_0_0() { return cTargetModelTypeTargetModelTypeDefParserRuleCall_0_0; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }
	}
	public class TargetModelTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.TargetModelTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTargetModelTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeContainerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTypeContainerCharacteristicTypeContainerCrossReference_2_1_0 = (CrossReference)cTypeContainerAssignment_2_1.eContents().get(0);
		private final RuleCall cTypeContainerCharacteristicTypeContainerIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTypeContainerCharacteristicTypeContainerCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAllocationModelAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cAllocationModelAllocationCrossReference_2_2_1_0 = (CrossReference)cAllocationModelAssignment_2_2_1.eContents().get(0);
		private final RuleCall cAllocationModelAllocationIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cAllocationModelAllocationCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Assignment cUsageScenarioAssignment_2_2_3 = (Assignment)cGroup_2_2.eContents().get(3);
		private final CrossReference cUsageScenarioUsageScenarioCrossReference_2_2_3_0 = (CrossReference)cUsageScenarioAssignment_2_2_3.eContents().get(0);
		private final RuleCall cUsageScenarioUsageScenarioIDTerminalRuleCall_2_2_3_0_1 = (RuleCall)cUsageScenarioUsageScenarioCrossReference_2_2_3_0.eContents().get(1);
		
		//TargetModelTypeDef:
		//	'target' type=TargetModelType ('using' typeContainer=[characteristics::CharacteristicTypeContainer] (','
		//	allocationModel=[allocation::Allocation] ',' usageScenario=[usagemodel::UsageScenario])?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'target' type=TargetModelType ('using' typeContainer=[characteristics::CharacteristicTypeContainer] (','
		//allocationModel=[allocation::Allocation] ',' usageScenario=[usagemodel::UsageScenario])?)?
		public Group getGroup() { return cGroup; }
		
		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//type=TargetModelType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TargetModelType
		public RuleCall getTypeTargetModelTypeEnumRuleCall_1_0() { return cTypeTargetModelTypeEnumRuleCall_1_0; }
		
		//('using' typeContainer=[characteristics::CharacteristicTypeContainer] (',' allocationModel=[allocation::Allocation] ','
		//usageScenario=[usagemodel::UsageScenario])?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'using'
		public Keyword getUsingKeyword_2_0() { return cUsingKeyword_2_0; }
		
		//typeContainer=[characteristics::CharacteristicTypeContainer]
		public Assignment getTypeContainerAssignment_2_1() { return cTypeContainerAssignment_2_1; }
		
		//[characteristics::CharacteristicTypeContainer]
		public CrossReference getTypeContainerCharacteristicTypeContainerCrossReference_2_1_0() { return cTypeContainerCharacteristicTypeContainerCrossReference_2_1_0; }
		
		//ID
		public RuleCall getTypeContainerCharacteristicTypeContainerIDTerminalRuleCall_2_1_0_1() { return cTypeContainerCharacteristicTypeContainerIDTerminalRuleCall_2_1_0_1; }
		
		//(',' allocationModel=[allocation::Allocation] ',' usageScenario=[usagemodel::UsageScenario])?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//allocationModel=[allocation::Allocation]
		public Assignment getAllocationModelAssignment_2_2_1() { return cAllocationModelAssignment_2_2_1; }
		
		//[allocation::Allocation]
		public CrossReference getAllocationModelAllocationCrossReference_2_2_1_0() { return cAllocationModelAllocationCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getAllocationModelAllocationIDTerminalRuleCall_2_2_1_0_1() { return cAllocationModelAllocationIDTerminalRuleCall_2_2_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_2_2() { return cCommaKeyword_2_2_2; }
		
		//usageScenario=[usagemodel::UsageScenario]
		public Assignment getUsageScenarioAssignment_2_2_3() { return cUsageScenarioAssignment_2_2_3; }
		
		//[usagemodel::UsageScenario]
		public CrossReference getUsageScenarioUsageScenarioCrossReference_2_2_3_0() { return cUsageScenarioUsageScenarioCrossReference_2_2_3_0; }
		
		//ID
		public RuleCall getUsageScenarioUsageScenarioIDTerminalRuleCall_2_2_3_0_1() { return cUsageScenarioUsageScenarioIDTerminalRuleCall_2_2_3_0_1; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacteristicTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharacteristicClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAbstractElementAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//AbstractElement:
		//	Include | CharacteristicType | CharacteristicClass | Constraint | {AbstractElement} SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//Include | CharacteristicType | CharacteristicClass | Constraint | {AbstractElement} SL_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_0() { return cIncludeParserRuleCall_0; }
		
		//CharacteristicType
		public RuleCall getCharacteristicTypeParserRuleCall_1() { return cCharacteristicTypeParserRuleCall_1; }
		
		//CharacteristicClass
		public RuleCall getCharacteristicClassParserRuleCall_2() { return cCharacteristicClassParserRuleCall_2; }
		
		//Constraint
		public RuleCall getConstraintParserRuleCall_3() { return cConstraintParserRuleCall_3; }
		
		//{AbstractElement} SL_COMMENT
		public Group getGroup_4() { return cGroup_4; }
		
		//{AbstractElement}
		public Action getAbstractElementAction_4_0() { return cAbstractElementAction_4_0; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_4_1() { return cSL_COMMENTTerminalRuleCall_4_1; }
	}
	public class CharacteristicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefCharacteristicTypeCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefCharacteristicTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cRefCharacteristicTypeCrossReference_3_0.eContents().get(1);
		
		//CharacteristicType:
		//	'type' name=ID ':' ref=[characteristics::CharacteristicType];
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID ':' ref=[characteristics::CharacteristicType]
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//ref=[characteristics::CharacteristicType]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }
		
		//[characteristics::CharacteristicType]
		public CrossReference getRefCharacteristicTypeCrossReference_3_0() { return cRefCharacteristicTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getRefCharacteristicTypeIDTerminalRuleCall_3_0_1() { return cRefCharacteristicTypeIDTerminalRuleCall_3_0_1; }
	}
	public class CharacteristicClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersCharacteristicTypeSelectorParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersCharacteristicTypeSelectorParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CharacteristicClass:
		//	'class' name=ID '{' members+=CharacteristicTypeSelector (',' members+=CharacteristicTypeSelector)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID '{' members+=CharacteristicTypeSelector (',' members+=CharacteristicTypeSelector)* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//members+=CharacteristicTypeSelector
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//CharacteristicTypeSelector
		public RuleCall getMembersCharacteristicTypeSelectorParserRuleCall_3_0() { return cMembersCharacteristicTypeSelectorParserRuleCall_3_0; }
		
		//(',' members+=CharacteristicTypeSelector)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//members+=CharacteristicTypeSelector
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }
		
		//CharacteristicTypeSelector
		public RuleCall getMembersCharacteristicTypeSelectorParserRuleCall_4_1_0() { return cMembersCharacteristicTypeSelectorParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CharacteristicTypeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicTypeSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefCharacteristicTypeCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefCharacteristicTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cRefCharacteristicTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNegatedAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_2_0_0_0 = (Keyword)cNegatedAssignment_2_0_0.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cLiteralsEnumCharacteristicLiteralCrossReference_2_0_1_0 = (CrossReference)cLiteralsAssignment_2_0_1.eContents().get(0);
		private final RuleCall cLiteralsEnumCharacteristicLiteralIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cLiteralsEnumCharacteristicLiteralCrossReference_2_0_1_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cLiteralsEnumCharacteristicLiteralCrossReference_2_1_1_0 = (CrossReference)cLiteralsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cLiteralsEnumCharacteristicLiteralIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cLiteralsEnumCharacteristicLiteralCrossReference_2_1_1_0.eContents().get(1);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final CrossReference cLiteralsEnumCharacteristicLiteralCrossReference_2_1_2_1_0 = (CrossReference)cLiteralsAssignment_2_1_2_1.eContents().get(0);
		private final RuleCall cLiteralsEnumCharacteristicLiteralIDTerminalRuleCall_2_1_2_1_0_1 = (RuleCall)cLiteralsEnumCharacteristicLiteralCrossReference_2_1_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//CharacteristicTypeSelector:
		//	ref=[CharacteristicType] '.' (negated?='!'? literals+=[characteristics::EnumCharacteristicLiteral] | '['
		//	literals+=[characteristics::EnumCharacteristicLiteral] (',' literals+=[characteristics::EnumCharacteristicLiteral])*
		//	']');
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[CharacteristicType] '.' (negated?='!'? literals+=[characteristics::EnumCharacteristicLiteral] | '['
		//literals+=[characteristics::EnumCharacteristicLiteral] (',' literals+=[characteristics::EnumCharacteristicLiteral])*
		//']')
		public Group getGroup() { return cGroup; }
		
		//ref=[CharacteristicType]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[CharacteristicType]
		public CrossReference getRefCharacteristicTypeCrossReference_0_0() { return cRefCharacteristicTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getRefCharacteristicTypeIDTerminalRuleCall_0_0_1() { return cRefCharacteristicTypeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(negated?='!'? literals+=[characteristics::EnumCharacteristicLiteral] | '['
		//literals+=[characteristics::EnumCharacteristicLiteral] (',' literals+=[characteristics::EnumCharacteristicLiteral])*
		//']')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//negated?='!'? literals+=[characteristics::EnumCharacteristicLiteral]
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//negated?='!'?
		public Assignment getNegatedAssignment_2_0_0() { return cNegatedAssignment_2_0_0; }
		
		//'!'
		public Keyword getNegatedExclamationMarkKeyword_2_0_0_0() { return cNegatedExclamationMarkKeyword_2_0_0_0; }
		
		//literals+=[characteristics::EnumCharacteristicLiteral]
		public Assignment getLiteralsAssignment_2_0_1() { return cLiteralsAssignment_2_0_1; }
		
		//[characteristics::EnumCharacteristicLiteral]
		public CrossReference getLiteralsEnumCharacteristicLiteralCrossReference_2_0_1_0() { return cLiteralsEnumCharacteristicLiteralCrossReference_2_0_1_0; }
		
		//ID
		public RuleCall getLiteralsEnumCharacteristicLiteralIDTerminalRuleCall_2_0_1_0_1() { return cLiteralsEnumCharacteristicLiteralIDTerminalRuleCall_2_0_1_0_1; }
		
		//'[' literals+=[characteristics::EnumCharacteristicLiteral] (',' literals+=[characteristics::EnumCharacteristicLiteral])*
		//']'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }
		
		//literals+=[characteristics::EnumCharacteristicLiteral]
		public Assignment getLiteralsAssignment_2_1_1() { return cLiteralsAssignment_2_1_1; }
		
		//[characteristics::EnumCharacteristicLiteral]
		public CrossReference getLiteralsEnumCharacteristicLiteralCrossReference_2_1_1_0() { return cLiteralsEnumCharacteristicLiteralCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getLiteralsEnumCharacteristicLiteralIDTerminalRuleCall_2_1_1_0_1() { return cLiteralsEnumCharacteristicLiteralIDTerminalRuleCall_2_1_1_0_1; }
		
		//(',' literals+=[characteristics::EnumCharacteristicLiteral])*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//literals+=[characteristics::EnumCharacteristicLiteral]
		public Assignment getLiteralsAssignment_2_1_2_1() { return cLiteralsAssignment_2_1_2_1; }
		
		//[characteristics::EnumCharacteristicLiteral]
		public CrossReference getLiteralsEnumCharacteristicLiteralCrossReference_2_1_2_1_0() { return cLiteralsEnumCharacteristicLiteralCrossReference_2_1_2_1_0; }
		
		//ID
		public RuleCall getLiteralsEnumCharacteristicLiteralIDTerminalRuleCall_2_1_2_1_0_1() { return cLiteralsEnumCharacteristicLiteralIDTerminalRuleCall_2_1_2_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Include:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleRuleParserRuleCall_3_0 = (RuleCall)cRuleAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constraint:
		//	'constraint' name=ID '{' rule=Rule '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint' name=ID '{' rule=Rule '}'
		public Group getGroup() { return cGroup; }
		
		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//rule=Rule
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_3_0() { return cRuleRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataSelectorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDataSelectorsDataSelectorParserRuleCall_0_0 = (RuleCall)cDataSelectorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDataSelectorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDataSelectorsDataSelectorParserRuleCall_1_1_0 = (RuleCall)cDataSelectorsAssignment_1_1.eContents().get(0);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Assignment cDestinationSelectorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestinationSelectorsDestinationSelectorParserRuleCall_3_0 = (RuleCall)cDestinationSelectorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAmpersandKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDestinationSelectorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDestinationSelectorsDestinationSelectorParserRuleCall_4_1_0 = (RuleCall)cDestinationSelectorsAssignment_4_1.eContents().get(0);
		
		//Rule:
		//	dataSelectors+=DataSelector ('&' dataSelectors+=DataSelector)*
		//	statement=Statement
		//	destinationSelectors+=DestinationSelector ('&' destinationSelectors+=DestinationSelector)*;
		@Override public ParserRule getRule() { return rule; }
		
		//dataSelectors+=DataSelector ('&' dataSelectors+=DataSelector)* statement=Statement
		//destinationSelectors+=DestinationSelector ('&' destinationSelectors+=DestinationSelector)*
		public Group getGroup() { return cGroup; }
		
		//dataSelectors+=DataSelector
		public Assignment getDataSelectorsAssignment_0() { return cDataSelectorsAssignment_0; }
		
		//DataSelector
		public RuleCall getDataSelectorsDataSelectorParserRuleCall_0_0() { return cDataSelectorsDataSelectorParserRuleCall_0_0; }
		
		//('&' dataSelectors+=DataSelector)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }
		
		//dataSelectors+=DataSelector
		public Assignment getDataSelectorsAssignment_1_1() { return cDataSelectorsAssignment_1_1; }
		
		//DataSelector
		public RuleCall getDataSelectorsDataSelectorParserRuleCall_1_1_0() { return cDataSelectorsDataSelectorParserRuleCall_1_1_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
		
		//destinationSelectors+=DestinationSelector
		public Assignment getDestinationSelectorsAssignment_3() { return cDestinationSelectorsAssignment_3; }
		
		//DestinationSelector
		public RuleCall getDestinationSelectorsDestinationSelectorParserRuleCall_3_0() { return cDestinationSelectorsDestinationSelectorParserRuleCall_3_0; }
		
		//('&' destinationSelectors+=DestinationSelector)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_4_0() { return cAmpersandKeyword_4_0; }
		
		//destinationSelectors+=DestinationSelector
		public Assignment getDestinationSelectorsAssignment_4_1() { return cDestinationSelectorsAssignment_4_1; }
		
		//DestinationSelector
		public RuleCall getDestinationSelectorsDestinationSelectorParserRuleCall_4_1_0() { return cDestinationSelectorsDestinationSelectorParserRuleCall_4_1_0; }
	}
	public class DataSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.DataSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeClassSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataSelector:
		//	AttributeSelector | AttributeClassSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeSelector | AttributeClassSelector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeSelector
		public RuleCall getAttributeSelectorParserRuleCall_0() { return cAttributeSelectorParserRuleCall_0; }
		
		//AttributeClassSelector
		public RuleCall getAttributeClassSelectorParserRuleCall_1() { return cAttributeClassSelectorParserRuleCall_1; }
	}
	public class AttributeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.AttributeSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefCharacteristicTypeSelectorParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		
		//AttributeSelector:
		//	'data.attribute.' ref=CharacteristicTypeSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//'data.attribute.' ref=CharacteristicTypeSelector
		public Group getGroup() { return cGroup; }
		
		//'data.attribute.'
		public Keyword getDataAttributeKeyword_0() { return cDataAttributeKeyword_0; }
		
		//ref=CharacteristicTypeSelector
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//CharacteristicTypeSelector
		public RuleCall getRefCharacteristicTypeSelectorParserRuleCall_1_0() { return cRefCharacteristicTypeSelectorParserRuleCall_1_0; }
	}
	public class AttributeClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.AttributeClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefCharacteristicClassCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefCharacteristicClassIDTerminalRuleCall_1_0_1 = (RuleCall)cRefCharacteristicClassCrossReference_1_0.eContents().get(1);
		
		//AttributeClassSelector:
		//	'data.class.' ref=[CharacteristicClass];
		@Override public ParserRule getRule() { return rule; }
		
		//'data.class.' ref=[CharacteristicClass]
		public Group getGroup() { return cGroup; }
		
		//'data.class.'
		public Keyword getDataClassKeyword_0() { return cDataClassKeyword_0; }
		
		//ref=[CharacteristicClass]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[CharacteristicClass]
		public CrossReference getRefCharacteristicClassCrossReference_1_0() { return cRefCharacteristicClassCrossReference_1_0; }
		
		//ID
		public RuleCall getRefCharacteristicClassIDTerminalRuleCall_1_0_1() { return cRefCharacteristicClassIDTerminalRuleCall_1_0_1; }
	}
	public class DestinationSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.DestinationSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertySelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyClassSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNodeIdentitiySelectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DestinationSelector:
		//	PropertySelector | PropertyClassSelector | NodeIdentitiySelector;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertySelector | PropertyClassSelector | NodeIdentitiySelector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PropertySelector
		public RuleCall getPropertySelectorParserRuleCall_0() { return cPropertySelectorParserRuleCall_0; }
		
		//PropertyClassSelector
		public RuleCall getPropertyClassSelectorParserRuleCall_1() { return cPropertyClassSelectorParserRuleCall_1; }
		
		//NodeIdentitiySelector
		public RuleCall getNodeIdentitiySelectorParserRuleCall_2() { return cNodeIdentitiySelectorParserRuleCall_2; }
	}
	public class PropertySelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.PropertySelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodePropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefCharacteristicTypeSelectorParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		
		//PropertySelector:
		//	'node.property.' ref=CharacteristicTypeSelector;
		@Override public ParserRule getRule() { return rule; }
		
		//'node.property.' ref=CharacteristicTypeSelector
		public Group getGroup() { return cGroup; }
		
		//'node.property.'
		public Keyword getNodePropertyKeyword_0() { return cNodePropertyKeyword_0; }
		
		//ref=CharacteristicTypeSelector
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//CharacteristicTypeSelector
		public RuleCall getRefCharacteristicTypeSelectorParserRuleCall_1_0() { return cRefCharacteristicTypeSelectorParserRuleCall_1_0; }
	}
	public class PropertyClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.PropertyClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefCharacteristicClassCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefCharacteristicClassIDTerminalRuleCall_1_0_1 = (RuleCall)cRefCharacteristicClassCrossReference_1_0.eContents().get(1);
		
		//PropertyClassSelector:
		//	'node.class.' ref=[CharacteristicClass];
		@Override public ParserRule getRule() { return rule; }
		
		//'node.class.' ref=[CharacteristicClass]
		public Group getGroup() { return cGroup; }
		
		//'node.class.'
		public Keyword getNodeClassKeyword_0() { return cNodeClassKeyword_0; }
		
		//ref=[CharacteristicClass]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[CharacteristicClass]
		public CrossReference getRefCharacteristicClassCrossReference_1_0() { return cRefCharacteristicClassCrossReference_1_0; }
		
		//ID
		public RuleCall getRefCharacteristicClassIDTerminalRuleCall_1_0_1() { return cRefCharacteristicClassIDTerminalRuleCall_1_0_1; }
	}
	public class NodeIdentitiySelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.NodeIdentitiySelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNodeNameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNodeIdentityKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssemblyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAssemblyAssemblyContextCrossReference_1_1_0 = (CrossReference)cAssemblyAssignment_1_1.eContents().get(0);
		private final RuleCall cAssemblyAssemblyContextIDTerminalRuleCall_1_1_0_1 = (RuleCall)cAssemblyAssemblyContextCrossReference_1_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cComponentAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cComponentBasicComponentCrossReference_1_3_0 = (CrossReference)cComponentAssignment_1_3.eContents().get(0);
		private final RuleCall cComponentBasicComponentIDTerminalRuleCall_1_3_0_1 = (RuleCall)cComponentBasicComponentCrossReference_1_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cSeffAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cSeffServiceEffectSpecificationCrossReference_1_5_0 = (CrossReference)cSeffAssignment_1_5.eContents().get(0);
		private final RuleCall cSeffServiceEffectSpecificationIDTerminalRuleCall_1_5_0_1 = (RuleCall)cSeffServiceEffectSpecificationCrossReference_1_5_0.eContents().get(1);
		
		//NodeIdentitiySelector:
		//	'node.name.' name=STRING | 'node.identity.' assembly=[composition::AssemblyContext] '.'
		//	component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification];
		@Override public ParserRule getRule() { return rule; }
		
		//'node.name.' name=STRING | 'node.identity.' assembly=[composition::AssemblyContext] '.'
		//component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'node.name.' name=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//'node.name.'
		public Keyword getNodeNameKeyword_0_0() { return cNodeNameKeyword_0_0; }
		
		//name=STRING
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1_0() { return cNameSTRINGTerminalRuleCall_0_1_0; }
		
		//'node.identity.' assembly=[composition::AssemblyContext] '.' component=[repository::BasicComponent] '.'
		//seff=[seff::ServiceEffectSpecification]
		public Group getGroup_1() { return cGroup_1; }
		
		//'node.identity.'
		public Keyword getNodeIdentityKeyword_1_0() { return cNodeIdentityKeyword_1_0; }
		
		//assembly=[composition::AssemblyContext]
		public Assignment getAssemblyAssignment_1_1() { return cAssemblyAssignment_1_1; }
		
		//[composition::AssemblyContext]
		public CrossReference getAssemblyAssemblyContextCrossReference_1_1_0() { return cAssemblyAssemblyContextCrossReference_1_1_0; }
		
		//ID
		public RuleCall getAssemblyAssemblyContextIDTerminalRuleCall_1_1_0_1() { return cAssemblyAssemblyContextIDTerminalRuleCall_1_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//component=[repository::BasicComponent]
		public Assignment getComponentAssignment_1_3() { return cComponentAssignment_1_3; }
		
		//[repository::BasicComponent]
		public CrossReference getComponentBasicComponentCrossReference_1_3_0() { return cComponentBasicComponentCrossReference_1_3_0; }
		
		//ID
		public RuleCall getComponentBasicComponentIDTerminalRuleCall_1_3_0_1() { return cComponentBasicComponentIDTerminalRuleCall_1_3_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_4() { return cFullStopKeyword_1_4; }
		
		//seff=[seff::ServiceEffectSpecification]
		public Assignment getSeffAssignment_1_5() { return cSeffAssignment_1_5; }
		
		//[seff::ServiceEffectSpecification]
		public CrossReference getSeffServiceEffectSpecificationCrossReference_1_5_0() { return cSeffServiceEffectSpecificationCrossReference_1_5_0; }
		
		//ID
		public RuleCall getSeffServiceEffectSpecificationIDTerminalRuleCall_1_5_0_1() { return cSeffServiceEffectSpecificationIDTerminalRuleCall_1_5_0_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModalityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModalityStatementModalityParserRuleCall_0_0 = (RuleCall)cModalityAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeStatementTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Statement:
		//	modality=StatementModality type=StatementType;
		@Override public ParserRule getRule() { return rule; }
		
		//modality=StatementModality type=StatementType
		public Group getGroup() { return cGroup; }
		
		//modality=StatementModality
		public Assignment getModalityAssignment_0() { return cModalityAssignment_0; }
		
		//StatementModality
		public RuleCall getModalityStatementModalityParserRuleCall_0_0() { return cModalityStatementModalityParserRuleCall_0_0; }
		
		//type=StatementType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//StatementType
		public RuleCall getTypeStatementTypeParserRuleCall_1_0() { return cTypeStatementTypeParserRuleCall_1_0; }
	}
	public class StatementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.StatementType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameFLOWSKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//StatementType:
		//	name='FLOWS';
		@Override public ParserRule getRule() { return rule; }
		
		//name='FLOWS'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'FLOWS'
		public Keyword getNameFLOWSKeyword_0() { return cNameFLOWSKeyword_0; }
	}
	public class StatementModalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.StatementModality");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameNEVERKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//StatementModality:
		//	name='NEVER';
		@Override public ParserRule getRule() { return rule; }
		
		//name='NEVER'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'NEVER'
		public Keyword getNameNEVERKeyword_0() { return cNameNEVERKeyword_0; }
	}
	
	public class TargetModelTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.TargetModelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOperationModelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOperationModelOperationModelKeyword_0_0 = (Keyword)cOperationModelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDataCentricPalladioEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDataCentricPalladioDataCentricPalladioKeyword_1_0 = (Keyword)cDataCentricPalladioEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExtendedDFDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExtendedDFDExtendedDFDKeyword_2_0 = (Keyword)cExtendedDFDEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TargetModelType:
		//	OperationModel | DataCentricPalladio | ExtendedDFD;
		public EnumRule getRule() { return rule; }
		
		//OperationModel | DataCentricPalladio | ExtendedDFD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationModel
		public EnumLiteralDeclaration getOperationModelEnumLiteralDeclaration_0() { return cOperationModelEnumLiteralDeclaration_0; }
		
		//"OperationModel"
		public Keyword getOperationModelOperationModelKeyword_0_0() { return cOperationModelOperationModelKeyword_0_0; }
		
		//DataCentricPalladio
		public EnumLiteralDeclaration getDataCentricPalladioEnumLiteralDeclaration_1() { return cDataCentricPalladioEnumLiteralDeclaration_1; }
		
		//"DataCentricPalladio"
		public Keyword getDataCentricPalladioDataCentricPalladioKeyword_1_0() { return cDataCentricPalladioDataCentricPalladioKeyword_1_0; }
		
		//ExtendedDFD
		public EnumLiteralDeclaration getExtendedDFDEnumLiteralDeclaration_2() { return cExtendedDFDEnumLiteralDeclaration_2; }
		
		//"ExtendedDFD"
		public Keyword getExtendedDFDExtendedDFDKeyword_2_0() { return cExtendedDFDExtendedDFDKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final TargetModelTypeDefElements pTargetModelTypeDef;
	private final TargetModelTypeElements eTargetModelType;
	private final AbstractElementElements pAbstractElement;
	private final CharacteristicTypeElements pCharacteristicType;
	private final CharacteristicClassElements pCharacteristicClass;
	private final CharacteristicTypeSelectorElements pCharacteristicTypeSelector;
	private final IncludeElements pInclude;
	private final ConstraintElements pConstraint;
	private final RuleElements pRule;
	private final DataSelectorElements pDataSelector;
	private final AttributeSelectorElements pAttributeSelector;
	private final AttributeClassSelectorElements pAttributeClassSelector;
	private final DestinationSelectorElements pDestinationSelector;
	private final PropertySelectorElements pPropertySelector;
	private final PropertyClassSelectorElements pPropertyClassSelector;
	private final NodeIdentitiySelectorElements pNodeIdentitiySelector;
	private final StatementElements pStatement;
	private final StatementTypeElements pStatementType;
	private final StatementModalityElements pStatementModality;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTargetModelTypeDef = new TargetModelTypeDefElements();
		this.eTargetModelType = new TargetModelTypeElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pCharacteristicType = new CharacteristicTypeElements();
		this.pCharacteristicClass = new CharacteristicClassElements();
		this.pCharacteristicTypeSelector = new CharacteristicTypeSelectorElements();
		this.pInclude = new IncludeElements();
		this.pConstraint = new ConstraintElements();
		this.pRule = new RuleElements();
		this.pDataSelector = new DataSelectorElements();
		this.pAttributeSelector = new AttributeSelectorElements();
		this.pAttributeClassSelector = new AttributeClassSelectorElements();
		this.pDestinationSelector = new DestinationSelectorElements();
		this.pPropertySelector = new PropertySelectorElements();
		this.pPropertyClassSelector = new PropertyClassSelectorElements();
		this.pNodeIdentitiySelector = new NodeIdentitiySelectorElements();
		this.pStatement = new StatementElements();
		this.pStatementType = new StatementTypeElements();
		this.pStatementModality = new StatementModalityElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.sebinside.dcp.dsl.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	targetModelType=TargetModelTypeDef?
	//	elements+=AbstractElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TargetModelTypeDef:
	//	'target' type=TargetModelType ('using' typeContainer=[characteristics::CharacteristicTypeContainer] (','
	//	allocationModel=[allocation::Allocation] ',' usageScenario=[usagemodel::UsageScenario])?)?;
	public TargetModelTypeDefElements getTargetModelTypeDefAccess() {
		return pTargetModelTypeDef;
	}
	
	public ParserRule getTargetModelTypeDefRule() {
		return getTargetModelTypeDefAccess().getRule();
	}
	
	//enum TargetModelType:
	//	OperationModel | DataCentricPalladio | ExtendedDFD;
	public TargetModelTypeElements getTargetModelTypeAccess() {
		return eTargetModelType;
	}
	
	public EnumRule getTargetModelTypeRule() {
		return getTargetModelTypeAccess().getRule();
	}
	
	//AbstractElement:
	//	Include | CharacteristicType | CharacteristicClass | Constraint | {AbstractElement} SL_COMMENT;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//CharacteristicType:
	//	'type' name=ID ':' ref=[characteristics::CharacteristicType];
	public CharacteristicTypeElements getCharacteristicTypeAccess() {
		return pCharacteristicType;
	}
	
	public ParserRule getCharacteristicTypeRule() {
		return getCharacteristicTypeAccess().getRule();
	}
	
	//CharacteristicClass:
	//	'class' name=ID '{' members+=CharacteristicTypeSelector (',' members+=CharacteristicTypeSelector)* '}';
	public CharacteristicClassElements getCharacteristicClassAccess() {
		return pCharacteristicClass;
	}
	
	public ParserRule getCharacteristicClassRule() {
		return getCharacteristicClassAccess().getRule();
	}
	
	//CharacteristicTypeSelector:
	//	ref=[CharacteristicType] '.' (negated?='!'? literals+=[characteristics::EnumCharacteristicLiteral] | '['
	//	literals+=[characteristics::EnumCharacteristicLiteral] (',' literals+=[characteristics::EnumCharacteristicLiteral])*
	//	']');
	public CharacteristicTypeSelectorElements getCharacteristicTypeSelectorAccess() {
		return pCharacteristicTypeSelector;
	}
	
	public ParserRule getCharacteristicTypeSelectorRule() {
		return getCharacteristicTypeSelectorAccess().getRule();
	}
	
	//Include:
	//	'import' importURI=STRING;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//Constraint:
	//	'constraint' name=ID '{' rule=Rule '}';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Rule:
	//	dataSelectors+=DataSelector ('&' dataSelectors+=DataSelector)*
	//	statement=Statement
	//	destinationSelectors+=DestinationSelector ('&' destinationSelectors+=DestinationSelector)*;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//DataSelector:
	//	AttributeSelector | AttributeClassSelector;
	public DataSelectorElements getDataSelectorAccess() {
		return pDataSelector;
	}
	
	public ParserRule getDataSelectorRule() {
		return getDataSelectorAccess().getRule();
	}
	
	//AttributeSelector:
	//	'data.attribute.' ref=CharacteristicTypeSelector;
	public AttributeSelectorElements getAttributeSelectorAccess() {
		return pAttributeSelector;
	}
	
	public ParserRule getAttributeSelectorRule() {
		return getAttributeSelectorAccess().getRule();
	}
	
	//AttributeClassSelector:
	//	'data.class.' ref=[CharacteristicClass];
	public AttributeClassSelectorElements getAttributeClassSelectorAccess() {
		return pAttributeClassSelector;
	}
	
	public ParserRule getAttributeClassSelectorRule() {
		return getAttributeClassSelectorAccess().getRule();
	}
	
	//DestinationSelector:
	//	PropertySelector | PropertyClassSelector | NodeIdentitiySelector;
	public DestinationSelectorElements getDestinationSelectorAccess() {
		return pDestinationSelector;
	}
	
	public ParserRule getDestinationSelectorRule() {
		return getDestinationSelectorAccess().getRule();
	}
	
	//PropertySelector:
	//	'node.property.' ref=CharacteristicTypeSelector;
	public PropertySelectorElements getPropertySelectorAccess() {
		return pPropertySelector;
	}
	
	public ParserRule getPropertySelectorRule() {
		return getPropertySelectorAccess().getRule();
	}
	
	//PropertyClassSelector:
	//	'node.class.' ref=[CharacteristicClass];
	public PropertyClassSelectorElements getPropertyClassSelectorAccess() {
		return pPropertyClassSelector;
	}
	
	public ParserRule getPropertyClassSelectorRule() {
		return getPropertyClassSelectorAccess().getRule();
	}
	
	//NodeIdentitiySelector:
	//	'node.name.' name=STRING | 'node.identity.' assembly=[composition::AssemblyContext] '.'
	//	component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification];
	public NodeIdentitiySelectorElements getNodeIdentitiySelectorAccess() {
		return pNodeIdentitiySelector;
	}
	
	public ParserRule getNodeIdentitiySelectorRule() {
		return getNodeIdentitiySelectorAccess().getRule();
	}
	
	//Statement:
	//	modality=StatementModality type=StatementType;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//StatementType:
	//	name='FLOWS';
	public StatementTypeElements getStatementTypeAccess() {
		return pStatementType;
	}
	
	public ParserRule getStatementTypeRule() {
		return getStatementTypeAccess().getRule();
	}
	
	//StatementModality:
	//	name='NEVER';
	public StatementModalityElements getStatementModalityAccess() {
		return pStatementModality;
	}
	
	public ParserRule getStatementModalityRule() {
		return getStatementModalityAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
