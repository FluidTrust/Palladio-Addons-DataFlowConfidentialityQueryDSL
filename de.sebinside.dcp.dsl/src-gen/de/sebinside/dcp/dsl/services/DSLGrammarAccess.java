/*
 * generated by Xtext 2.20.0
 */
package de.sebinside.dcp.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharacteristicsTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractElement:
		//	DataType | ValueSet | CharacteristicsType;
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | ValueSet | CharacteristicsType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//ValueSet
		public RuleCall getValueSetParserRuleCall_1() { return cValueSetParserRuleCall_1; }
		
		//CharacteristicsType
		public RuleCall getCharacteristicsTypeParserRuleCall_2() { return cCharacteristicsTypeParserRuleCall_2; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataType:
		//	'datatype' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ValueSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.ValueSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValuesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cAssignementOperatorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersIDTerminalRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMembersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMembersIDTerminalRuleCall_5_1_0 = (RuleCall)cMembersAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ValueSet:
		//	'valueset' name=ID AssignementOperator '[' members+=ID (',' members+=ID)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'valueset' name=ID AssignementOperator '[' members+=ID (',' members+=ID)* ']'
		public Group getGroup() { return cGroup; }
		
		//'valueset'
		public Keyword getValuesetKeyword_0() { return cValuesetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//AssignementOperator
		public RuleCall getAssignementOperatorParserRuleCall_2() { return cAssignementOperatorParserRuleCall_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//members+=ID
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }
		
		//ID
		public RuleCall getMembersIDTerminalRuleCall_4_0() { return cMembersIDTerminalRuleCall_4_0; }
		
		//(',' members+=ID)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//members+=ID
		public Assignment getMembersAssignment_5_1() { return cMembersAssignment_5_1; }
		
		//ID
		public RuleCall getMembersIDTerminalRuleCall_5_1_0() { return cMembersIDTerminalRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class CharacteristicsTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicsType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CharacteristicsType:
		//	AttributeType | PropertyType;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeType | PropertyType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeType
		public RuleCall getAttributeTypeParserRuleCall_0() { return cAttributeTypeParserRuleCall_0; }
		
		//PropertyType
		public RuleCall getPropertyTypeParserRuleCall_1() { return cPropertyTypeParserRuleCall_1; }
	}
	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.AttributeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cAssignementOperatorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cValuesetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValuesetValueSetCrossReference_3_0 = (CrossReference)cValuesetAssignment_3.eContents().get(0);
		private final RuleCall cValuesetValueSetIDTerminalRuleCall_3_0_1 = (RuleCall)cValuesetValueSetCrossReference_3_0.eContents().get(1);
		
		//AttributeType:
		//	'attribute' name=ID AssignementOperator valueset=[ValueSet];
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=ID AssignementOperator valueset=[ValueSet]
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//AssignementOperator
		public RuleCall getAssignementOperatorParserRuleCall_2() { return cAssignementOperatorParserRuleCall_2; }
		
		//valueset=[ValueSet]
		public Assignment getValuesetAssignment_3() { return cValuesetAssignment_3; }
		
		//[ValueSet]
		public CrossReference getValuesetValueSetCrossReference_3_0() { return cValuesetValueSetCrossReference_3_0; }
		
		//ID
		public RuleCall getValuesetValueSetIDTerminalRuleCall_3_0_1() { return cValuesetValueSetIDTerminalRuleCall_3_0_1; }
	}
	public class PropertyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.PropertyType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cAssignementOperatorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cValuesetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValuesetValueSetCrossReference_3_0 = (CrossReference)cValuesetAssignment_3.eContents().get(0);
		private final RuleCall cValuesetValueSetIDTerminalRuleCall_3_0_1 = (RuleCall)cValuesetValueSetCrossReference_3_0.eContents().get(1);
		
		//PropertyType:
		//	'property' name=ID AssignementOperator valueset=[ValueSet];
		@Override public ParserRule getRule() { return rule; }
		
		//'property' name=ID AssignementOperator valueset=[ValueSet]
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//AssignementOperator
		public RuleCall getAssignementOperatorParserRuleCall_2() { return cAssignementOperatorParserRuleCall_2; }
		
		//valueset=[ValueSet]
		public Assignment getValuesetAssignment_3() { return cValuesetAssignment_3; }
		
		//[ValueSet]
		public CrossReference getValuesetValueSetCrossReference_3_0() { return cValuesetValueSetCrossReference_3_0; }
		
		//ID
		public RuleCall getValuesetValueSetIDTerminalRuleCall_3_0_1() { return cValuesetValueSetIDTerminalRuleCall_3_0_1; }
	}
	public class CharacteristicClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersCharacteristicSelectorParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersCharacteristicSelectorParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CharacteristicClass:
		//	'class' name=ID '{' members+=CharacteristicSelector (',' members+=CharacteristicSelector)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID '{' members+=CharacteristicSelector (',' members+=CharacteristicSelector)* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//members+=CharacteristicSelector
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//CharacteristicSelector
		public RuleCall getMembersCharacteristicSelectorParserRuleCall_3_0() { return cMembersCharacteristicSelectorParserRuleCall_3_0; }
		
		//(',' members+=CharacteristicSelector)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//members+=CharacteristicSelector
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }
		
		//CharacteristicSelector
		public RuleCall getMembersCharacteristicSelectorParserRuleCall_4_1_0() { return cMembersCharacteristicSelectorParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CharacteristicSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.CharacteristicSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameCharacteristicsTypeCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameCharacteristicsTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cNameCharacteristicsTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiteralIDTerminalRuleCall_2_0 = (RuleCall)cLiteralAssignment_2.eContents().get(0);
		
		//CharacteristicSelector:
		//	name=[CharacteristicsType] '.' literal=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[CharacteristicsType] '.' literal=ID
		public Group getGroup() { return cGroup; }
		
		//name=[CharacteristicsType]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[CharacteristicsType]
		public CrossReference getNameCharacteristicsTypeCrossReference_0_0() { return cNameCharacteristicsTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getNameCharacteristicsTypeIDTerminalRuleCall_0_0_1() { return cNameCharacteristicsTypeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//literal=ID
		public Assignment getLiteralAssignment_2() { return cLiteralAssignment_2; }
		
		//ID
		public RuleCall getLiteralIDTerminalRuleCall_2_0() { return cLiteralIDTerminalRuleCall_2_0; }
	}
	public class AssignementOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sebinside.dcp.dsl.DSL.AssignementOperator");
		private final Keyword cLessThanSignHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//AssignementOperator:
		//	'<-';
		@Override public ParserRule getRule() { return rule; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword() { return cLessThanSignHyphenMinusKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final AbstractElementElements pAbstractElement;
	private final DataTypeElements pDataType;
	private final ValueSetElements pValueSet;
	private final CharacteristicsTypeElements pCharacteristicsType;
	private final AttributeTypeElements pAttributeType;
	private final PropertyTypeElements pPropertyType;
	private final CharacteristicClassElements pCharacteristicClass;
	private final CharacteristicSelectorElements pCharacteristicSelector;
	private final AssignementOperatorElements pAssignementOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pDataType = new DataTypeElements();
		this.pValueSet = new ValueSetElements();
		this.pCharacteristicsType = new CharacteristicsTypeElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pPropertyType = new PropertyTypeElements();
		this.pCharacteristicClass = new CharacteristicClassElements();
		this.pCharacteristicSelector = new CharacteristicSelectorElements();
		this.pAssignementOperator = new AssignementOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.sebinside.dcp.dsl.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=AbstractElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//AbstractElement:
	//	DataType | ValueSet | CharacteristicsType;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//DataType:
	//	'datatype' name=ID;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//ValueSet:
	//	'valueset' name=ID AssignementOperator '[' members+=ID (',' members+=ID)* ']';
	public ValueSetElements getValueSetAccess() {
		return pValueSet;
	}
	
	public ParserRule getValueSetRule() {
		return getValueSetAccess().getRule();
	}
	
	//CharacteristicsType:
	//	AttributeType | PropertyType;
	public CharacteristicsTypeElements getCharacteristicsTypeAccess() {
		return pCharacteristicsType;
	}
	
	public ParserRule getCharacteristicsTypeRule() {
		return getCharacteristicsTypeAccess().getRule();
	}
	
	//AttributeType:
	//	'attribute' name=ID AssignementOperator valueset=[ValueSet];
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//PropertyType:
	//	'property' name=ID AssignementOperator valueset=[ValueSet];
	public PropertyTypeElements getPropertyTypeAccess() {
		return pPropertyType;
	}
	
	public ParserRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}
	
	//CharacteristicClass:
	//	'class' name=ID '{' members+=CharacteristicSelector (',' members+=CharacteristicSelector)* '}';
	public CharacteristicClassElements getCharacteristicClassAccess() {
		return pCharacteristicClass;
	}
	
	public ParserRule getCharacteristicClassRule() {
		return getCharacteristicClassAccess().getRule();
	}
	
	//CharacteristicSelector:
	//	name=[CharacteristicsType] '.' literal=ID;
	public CharacteristicSelectorElements getCharacteristicSelectorAccess() {
		return pCharacteristicSelector;
	}
	
	public ParserRule getCharacteristicSelectorRule() {
		return getCharacteristicSelectorAccess().getRule();
	}
	
	//AssignementOperator:
	//	'<-';
	public AssignementOperatorElements getAssignementOperatorAccess() {
		return pAssignementOperator;
	}
	
	public ParserRule getAssignementOperatorRule() {
		return getAssignementOperatorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
