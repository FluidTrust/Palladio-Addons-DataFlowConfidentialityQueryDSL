/*
 * generated by Xtext 2.20.0
 */
package de.sebinside.dcp.dsl.generator

import java.io.ByteArrayOutputStream
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.palladiosimulator.supporting.prolog.model.prolog.PrologFactory

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val test = createFact("dog")

		val program = PrologFactory.eINSTANCE.createProgram
		program.clauses.add(test)

		val prologRessource = resource.resourceSet.createResource(resource.URI.appendFileExtension("pl"))
		prologRessource.contents.add(program)
		
		val outputStream = new ByteArrayOutputStream()
		prologRessource.save(outputStream, null)
		
		fsa.generateFile("output.pl", outputStream.toString)
		println("Done")
	}

	def static createFact(String name) {
		val fact = PrologFactory.eINSTANCE.createFact
		val term = PrologFactory.eINSTANCE.createCompoundTerm
		
		val body = PrologFactory.eINSTANCE.createCompoundTerm
		body.value = "fido"
		
		term.value = name
		term.arguments.add(body)
		fact.head = term
	
		return fact
	}
}
