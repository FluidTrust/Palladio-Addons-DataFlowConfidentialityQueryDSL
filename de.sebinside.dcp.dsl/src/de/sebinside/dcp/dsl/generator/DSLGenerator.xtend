/*
 * generated by Xtext 2.20.0
 */
package de.sebinside.dcp.dsl.generator

import de.sebinside.dcp.dsl.dSL.CharacteristicClass
import java.util.ArrayList
import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.palladiosimulator.supporting.prolog.model.prolog.Clause
import org.palladiosimulator.supporting.prolog.model.prolog.PrologFactory

import static de.sebinside.dcp.dsl.generator.DSLGeneratorUtils.*
import de.sebinside.dcp.dsl.dSL.Constraint
import de.sebinside.dcp.dsl.dSL.Rule
import org.palladiosimulator.supporting.prolog.model.prolog.expressions.Expression
import de.sebinside.dcp.dsl.dSL.AttributeSelector
import de.sebinside.dcp.dsl.dSL.AttributeClassSelector
import de.sebinside.dcp.dsl.dSL.PropertySelector
import de.sebinside.dcp.dsl.dSL.PropertyClassSelector
import de.sebinside.dcp.dsl.generator.DSLGeneratorUtils.QueryType
import org.palladiosimulator.supporting.prolog.model.prolog.CompoundTerm

class DSLGenerator extends AbstractGenerator {

	static final String DEV_OUTPUT_FILE_NAME = "output.pl"

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val program = PrologFactory.eINSTANCE.createProgram

		// Just testing with only Characteristic Classes
		for (element : resource.allContents.toIterable.filter(CharacteristicClass)) {
			program.clauses.addAll(element.compile)
		}

		// TODO: Handle constraints
		saveFile(fsa, resource, program, DEV_OUTPUT_FILE_NAME)
	}

	def List<Clause> compile(CharacteristicClass charateristicClass) {
		val clauses = new ArrayList<Clause>

		// Create rule referencing all facts
		val rule = Rule('''characteristicClass_«charateristicClass.name»''')
		rule.body = null

		// A rules arguments are all contained member types
		rule.head.arguments.addAll(charateristicClass.members.map[member|member.ref.name].toSet.map [ type |
			CompoundTerm(type)
		].toList)

		// Create single facts for every member
		charateristicClass.members.forEach [ member, index |
			member.literals.forEach [ literal |

				// Create and add fact
				val factName = '''characteristicsClass_«charateristicClass.name»_«member.ref.name»_«index»«if(member.negated) "_NEG"»'''
				val fact = SimpleFact(factName, literal)
				clauses.add(fact)

				// Create fact reference for the rule
				val factReference = CompoundTerm(fact.head.value, CompoundTerm(member.ref.name))

				// Handle negated facts
				val factExpression = if (member.negated) {
						NotProvable(factReference)
					} else {
						factReference
					}

				// A rule body consists of one or multiple combined facts
				if (rule.body === null) {
					rule.body = factExpression
				} else {
					// FIXME: conjuncted is not supported yet
					rule.body = LogicalAnd(rule.body, factExpression)
				}
			]
		]

		clauses.add(rule)
		clauses
	}

	def List<Clause> compile(Constraint constraint) {
		val clauses = new ArrayList<Clause>
		val constraintName = '''constraint_«constraint.name»'''

		// Every constraint is mapped to a rule
		val constraintRule = Rule(constraintName)

		// FIXME: The first iteration does only support one rule per constraint
		val mainRule = constraint.rule

		// FIXME: The first iteration does only support NEVER FLOW statements
		if (!mainRule.statement.modality.name.equals("NEVER") || !mainRule.statement.type.equals("FLOWS")) {
			println("Unable to generate. Unsupported modality or statement type.")
		} else {

			// A NEVER FLOWS statement consists of three sub rules
			val callArgumentRule = createQueryRule(QueryType.CALL_ARGUMENT, mainRule, constraintName)
			val returnValueRule = createQueryRule(QueryType.RETURN_VALUE, mainRule, constraintName)
			val callStateRule = createQueryRule(QueryType.CALL_STATE, mainRule, constraintName)

		// TODO: Combine rules, the arguments of the constraint rule are the combination of all sub rules
		}

		clauses
	}

	def createQueryRule(QueryType queryType, Rule rule, String constraintName) {
		val subRule = Rule('''«constraintName»_«queryType.toString»''')

		// These are all the elements of a query rule
		val queryTypeTerm = createQueryTypeUnification(queryType)
		val callStack = CompoundTerm("S")
		val operation = CompoundTerm("OP")
		val parameter = CompoundTerm("P")
		val callState = CompoundTerm("ST")
		val callStackUnification = createCallStackUnification(callStack, operation)

		// Map all data selectors to parts of a rule
		val dataSelectorTerm = rule.dataSelectors.map [ selector |
			switch selector {
				AttributeSelector: {
					val queries = LogicalAnd(callStackUnification, null)

					// Create a query for every literal of the selector
					selector.ref.literals.forEach [ literal |
						val query = createParameterQuery(queryType, callStack, parameter,
							AtomicQuotedString(selector.ref.ref.name), AtomicQuotedString(literal), operation,
							callState)

						if (queries.right === null) {
							queries.right = query
						} else {
							queries.right = LogicalAnd(queries.right, query)
						}
					]

					// Handle negation
					if (selector.ref.negated) {
						queries.right = NotProvable(queries.right)
					}

					queries
				}
				AttributeClassSelector: {
					val queries = LogicalAnd(callStackUnification, null)

					// TODO: Generate memberQuery and parameterQuery
					// TODO: Add class to classes set
					queries
				}
			}
		]

		// Map all destination selectors to parts of a rule
		val destinationSelectorTerm = rule.destinationSelectors.map [ selector |
			switch selector {
				PropertySelector: {
					// TODO
				}
				PropertyClassSelector: {
					// TODO
				}
			}
		]

		// TODO: Generate attribute / property class terms
		// TODO: Combine all selector terms and queryTypeTerm to final LogicalAnd
		// TODO: Set rules parameters
		subRule
	}

	def createQueryTypeUnification(QueryType queryType) {
		Unification(CompoundTerm("QueryType"), AtomicQuotedString(queryType.toString))
	}

	def createCallStackUnification(CompoundTerm stack, CompoundTerm head) {
		Unification(stack, List(head, CompoundTerm("_")))
	}

	def createMemberQuery(String valueSet, CompoundTerm member) {
		CompoundTerm("valueSetMember", #[AtomicQuotedString(valueSet), member])
	}

	def createCharacteristicsClassTerm(CharacteristicClass characteristicClass) {
		CompoundTerm(characteristicClass.name, characteristicClass.members.map[member|CompoundTerm(member.ref.name)])
	}

	def createParameterQuery(QueryType queryType, Expression stack, Expression parameter, Expression attribute,
		Expression value, Expression operation, Expression stateVariable) {

		switch queryType {
			case CALL_ARGUMENT: {
				CompoundTerm("callArgument", #[stack, parameter, attribute, value])
			}
			case RETURN_VALUE: {
				CompoundTerm("returnValue", #[stack, parameter, attribute, value])
			}
			case CALL_STATE: {
				val preCallState = CompoundTerm("preCallState", #[stack, operation, stateVariable, attribute, value])
				val postCallState = CompoundTerm("postCallState", #[stack, operation, stateVariable, attribute, value])
				LogicalOr(preCallState, postCallState)
			}
		}
	}

	def createPropertyQuery(Expression operation, Expression property, Expression value) {
		CompoundTerm("operationProperty", #[operation, property, value])
	}
}
