grammar de.sebinside.dcp.dsl.DSL with org.eclipse.xtext.common.Terminals

generate dSL "http://www.sebinside.de/dcp/dsl/DSL"

// Nested EPackage has to be referred to by platform:/resource URI
// https://sdqweb.ipd.kit.edu/wiki/Importing_nested_EPackages_in_Xtext
import "platform:/resource/org.palladiosimulator.pcm.dataprocessing/model/dataprocessing.ecore#//characteristics" as
characteristics
import "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore#//allocation" as allocation
import "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore#//usagemodel" as usagemodel
import "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore#//core/composition" as composition
import "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore#//repository" as repository
import "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore#//seff" as seff

Model:
	(targetModelType=TargetModelTypeDef)?
	(elements+=AbstractElement)*;

TargetModelTypeDef:
	'target' type=TargetModelType ('using' typeContainer=[characteristics::CharacteristicTypeContainer]
	(',' allocationModel=[allocation::Allocation] ',' usageModel=[usagemodel::UsageModel])?)?;

enum TargetModelType:
	OperationModel | DataCentricPalladio | ExtendedDFD;

AbstractElement:
	Include | CharacteristicType | CharacteristicClass | Constraint | {AbstractElement} SL_COMMENT;

CharacteristicType:
	'type' name=ID ':' ref=[characteristics::CharacteristicType];

CharacteristicClass:
	'class' name=ID '{' members+=CharacteristicTypeSelector (',' members+=CharacteristicTypeSelector)* '}';

CharacteristicTypeSelector:
	ref=[CharacteristicType] '.'
	// Single literal, may be negated
	(((negated?='!')? literals+=[characteristics::EnumCharacteristicLiteral]) |
	// Multiple literals, written as list
	('[' literals+=[characteristics::EnumCharacteristicLiteral]
	(',' literals+=[characteristics::EnumCharacteristicLiteral])*
	']') |
	// Variable usage
	(isVariableSelector?="$") variable=CharacteristicVariable);
	
CharacteristicVariable:
	name=ID (isSet?="{}")?
;

Include:
	'import' importURI=STRING;

Constraint:
	'constraint' name=ID '{' rule=Rule '}';

Rule:
	dataSelectors+=DataSelector ('&' dataSelectors+=DataSelector)*
	statement=Statement
	destinationSelectors+=DestinationSelector ('&' destinationSelectors+=DestinationSelector)*
	(condition=Condition)?;

DataSelector:
	AttributeSelector | AttributeClassSelector;

CharacteristicSelector:
	AttributeSelector | PropertySelector;

CharacteristicClassSelector:
	AttributeClassSelector | PropertyClassSelector;

AttributeSelector:
	'data.attribute.' ref=CharacteristicTypeSelector;

AttributeClassSelector:
	'data.class.' ref=[CharacteristicClass];

DestinationSelector:
	PropertySelector | PropertyClassSelector | NodeIdentitiySelector;

PropertySelector:
	'node.property.' ref=CharacteristicTypeSelector;

PropertyClassSelector:
	'node.class.' ref=[CharacteristicClass];

NodeIdentitiySelector:
	'node.name.' name=STRING | 'node.identity.' assembly=[composition::AssemblyContext] '.'
	component=[repository::BasicComponent] '.' seff=[seff::ServiceEffectSpecification];

Statement:
	modality=StatementModality type=StatementType;

StatementType:
	name='FLOWS';

StatementModality:
	name='NEVER';
	
Condition:
	'WHERE' todo=[CharacteristicVariable] 
;